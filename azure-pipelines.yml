trigger:
- master

pool:
  vmImage: 'ubuntu-16.04' # Has Docker
  # vmImage: 'macOS-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.12'
  # GOROOT: '/usr/local/Cellar/go/1.13.1/libexec' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- task: Bash@3
  displayName: 'Run tests'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(modulePath)'
    script: |
      go get -v -u github.com/jstemmer/go-junit-report
      go test -v 2>&1 | go-junit-report > test-results.xml

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(modulePath)/test-results.xml'
    failTaskOnFailedTests: true

- task: Bash@3
  displayName: 'Build the plugin'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(modulePath)'
    script: |
      DOCKER_IMAGE_VERSION=`cat version.go | grep VERSION | awk '{gsub(/"/, "", $4); print $4}'`
      echo "##vso[task.setvariable variable=DOCKER_IMAGE_VERSION]$DOCKER_IMAGE_VERSION"
      make all
      
- task: Docker@2
  displayName: Login to Docker Hub
  inputs:
    command: login
    containerRegistry: DockerHub

- task: Docker@2
  displayName: Build and push Docker image to Docker Hub
  inputs:
    command: buildAndPush
    buildContext: '$(modulePath)'
    repository: brianmcfeely/test-push
    tags: $(DOCKER_IMAGE_VERSION)

# - task: Bash@3
#   displayName: 'Build the Docker image'
#   inputs:
#     targetType: 'inline'
#     workingDirectory: '$(modulePath)'
#     script: |
#       VERSION=`cat version.go | grep VERSION | awk '{gsub(/"/, "", $4); print $4}'`
#       LOCAL_IMAGE=fluent-plugin
#       REMOTE_IMAGE=newrelic/newrelic-fluentbit-output
#       docker build -t ${LOCAL_IMAGE}:${VERSION} .
#       docker tag ${LOCAL_IMAGE}:${VERSION} ${REMOTE_IMAGE}:${VERSION}
#       # docker push ${REMOTE_IMAGE}:${VERSION}
#       docker images
