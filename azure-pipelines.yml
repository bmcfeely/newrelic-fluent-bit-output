trigger:
- master

pool:
  vmImage: 'macOS-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/Cellar/go/1.13.1/libexec' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    echo GOBIN=$GOBIN
    echo GOROOT=$GOROOT
    echo GOPATH=$GOPATH
    echo '--------------- which go ----------'
    which go
    echo '-----------------------------------'
    echo '--------------- ls -l `which go` ----------'
    ls -l `which go`
    echo '-----------------------------------'
    echo '--------------- $(dirname `which go`) ----------'
    $(dirname `which go`)
    echo '-----------------------------------'
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    echo 'GOBIN=$(GOBIN)'
    echo 'GOROOT=$(GOROOT)'
    echo 'GOPATH=$(GOPATH)'
    echo 'modulePath=$(modulePath)'
    find '$(modulePath)'
  displayName: 'Set up the Go workspace'


- task: Bash@3
  displayName: 'Run tests'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(modulePath)'
    script: |
      pwd
      # find '$(modulePath)'
      echo '>>> 1'
      go get -v -u github.com/jstemmer/go-junit-report
      echo '>>> 2'
      # find '$(modulePath)'
      go test -v 2>&1 | go-junit-report > test-results.xml
      echo '>>> 3'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(modulePath)/test-results.xml'
    failTaskOnFailedTests: true

- task: Bash@3
  displayName: 'Build the plugin'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(modulePath)'
    script: |
      make all



